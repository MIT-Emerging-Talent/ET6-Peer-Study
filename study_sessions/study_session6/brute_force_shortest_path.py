graph = {     0: {1: 6, 2: 4, 3: 2, 4: 3},    1: {0: 6, 2: 6, 3: 2, 4: 2},    2: {0: 4, 1: 6, 3: 8, 4: 2},    3: {0: 2, 1: 2, 2: 8, 4: 4},    4: {0: 3, 1: 2, 2: 2, 3: 4} }def get_all_paths(graph, start, end, path=[]):    """    Generate all the paths from start to the end        Parameters:        Graph - Dictionary: The graph to find the shortest path        start - int: The starting point (home)        end - int: The destanition (school)        path - list: store all possible paths            Returns:         A list of all posibble oaths as a list from to end            """    path = path + [start] # Create a new path that includes the starting node        print(path)        # Base case: Checking if current point is the end point    if start == end:        return [path]        paths = []        for neighbor in graph[start]:        print(neighbor, "Neighbor")        if neighbor not in path:            newPaths = get_all_paths(graph, neighbor, end, path) # Recurse            print(newPaths, "newPaths")            for p in newPaths:                print(p, "Each path from current neghbor P")                paths.append(p)                    return paths                #print(get_all_paths(graph, 3, 1))def calculate_path_weight(graph, path):    """    Calculate the total weight (cost) of the path        Parameters:        Graph - Dictionary: The graph to find the shortest path            Returns:        Total weight (sum of edge weights) of the path                """    weight = 0    for i in range(len(path) - 1):        weight += graph[path[i]][path[i + 1]]            return weight    def brute_force_shortest_path(graph, start, end):    """    Find the shortest path        Parameters:        Graph - Dictionary: The graph to find the shortest path        start - int: The starting point (home)        end - int: The destanition (school)            Return a tuple:        min_path - list: The shortest path         min_weight - int: The total of that path            """    all_paths = get_all_paths(graph, start, end) # get all paths        min_path = None    min_weight = float("inf") # start "infinity"        for path in all_paths:        weight = calculate_path_weight(graph, path)        if weight < min_weight:            min_weight = weight            min_path = path # Save this path if it has the smallest weight    return (min_path, min_weight)                    print(brute_force_shortest_path(graph, 3, 1))                                        